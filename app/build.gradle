plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
}


/**
 * Load the client authentication secrets here
 */
Properties secretProperties = new Properties()
def secretsFile = ".secrets"
def apiKey = ""
def hash = ""

if(rootProject.file(secretsFile))
{
    secretProperties.load(rootProject.file(secretsFile).newDataInputStream())
    apiKey = secretProperties.getProperty('apikey')
    hash = secretProperties.getProperty('hash')
}
else{
    throw new IllegalArgumentException("Please add your secrets before attempting to build")
}


def appPackageName = "com.dsmmachina.marvelmadness"
def targetVersion = 30
def minVersion = 28
def appVersionCode = 1
def appVersionName = "1.0.0"

android {

    compileSdkVersion targetVersion

    defaultConfig {
        applicationId appPackageName
        minSdkVersion minVersion
        targetSdkVersion targetVersion
        versionCode appVersionCode
        versionName appVersionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField("String", "API_KEY", "${apiKey}")
        buildConfigField("String", "HASH", "${hash}")
        buildConfigField("Boolean", "USE_PRETTY_THUMBNAIL", 'false')
    }

    buildTypes {

        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    buildFeatures {
        dataBinding true
        viewBinding true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    testOptions {

        reportDir "$rootDir/test-reports"
        resultsDir "$rootDir/test-results"

        unitTests {
            includeAndroidResources = true
            returnDefaultValues true
            all {
                jvmArgs '-XX:MaxPermSize=256m'
                if (it.name == 'testDebugUnitTest') {
                    systemProperty 'debug', 'true'
                }
            }
        }
    }
}

//SOURCE SETS **************************************************************//
sourceSets {
    main.java.srcDirs = ['src/main/kotlin/']
    test.java.srcDirs = ['src/test/kotlin/', 'src/androidTest/kotlin/']

    unitTest {
        java.srcDir file('src/test/kotlin')
        resources.srcDir file('test/resources')
    }
}

dependencies {

    // kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"

    // android
    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'

    // google
    implementation 'com.google.android.material:material:1.4.0'

    //rxjava / rxkotlin
    implementation "io.reactivex.rxjava2:rxjava:2.2.10"
    implementation("io.reactivex.rxjava2:rxkotlin:2.0.0")


    //okhttp and retrofit
    implementation "com.squareup.okhttp3:okhttp:3.12.1"
    implementation "com.squareup.retrofit2:converter-gson:2.4.0"
    implementation "com.squareup.retrofit2:retrofit:2.4.0"


    // picasso
    implementation "com.squareup.picasso:picasso:2.71828"


    // testing
    testImplementation 'junit:junit:4.13.2'
    testImplementation files("$project.buildDir/classes/debug")
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit:1.3.61'
    testImplementation 'org.robolectric:robolectric:4.3.1'

    androidTestImplementation 'androidx.annotation:annotation:1.2.0'
    androidTestImplementation "androidx.test:runner:1.4.0"
    androidTestImplementation "androidx.test:rules:1.4.0"
    androidTestImplementation "androidx.test.espresso:espresso-core:3.4.0"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:3.4.0"
    androidTestImplementation "androidx.test.espresso:espresso-intents:3.4.0"
}